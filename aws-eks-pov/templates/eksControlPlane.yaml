---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates the EKS Cluster management plane'

Parameters:
  EnvAlias:
    Type: String
    Default: ''
  EnvID:
    Type: String
    Default: ''
  PermissionsBoundary:
    Type: String
    Default: ''
  Username:
    Type: String
    Default: "wus-cloudshare"
    Description: IAM User who will be mapped system:masters
  VPCID:
    Type: String
    Default: ''
  EKSAccessRole:
    Type: String
    Default: ''
  Subnet1:
    Type: String
    Default: ''
  Subnet2:
    Type: String
    Default: ''
  EKSQSExtensionRoleArn:
    Type: String
    Default: ''

Conditions:
  PermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, '' ] ]

Resources:
  ClusterSharedNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
      - Key: Name
        Value: !Sub '${EnvAlias}-node-sg-${EnvID}'
      VpcId:
        Ref: VPCID
  serviceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvAlias}-eks-svc-role-${EnvID}"
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: eks.amazonaws.com }
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSServicePolicy'

  Cluster:
    Type: AWSQS::EKS::ClusterPOV
    Metadata:
      cfn-lint:
        config:
          ignore_checks: [ E3001 ]
    Properties:
      Name: !Sub "${EnvAlias}-eks-cluster-${EnvID}"
      ResourcesVpcConfig:
        EndpointPrivateAccess: true
        EndpointPublicAccess: true
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
      RoleArn: !GetAtt serviceRole.Arn
      Version: '1.21'
      KubernetesApiAccess:
        Users:
          - Arn: !Sub "arn:aws:iam::${AWS::AccountId}:user/${Username}"
            Username: !Sub "arn:aws:iam::${AWS::AccountId}:user/${Username}"
            Groups: [ "system:masters" ]
        Roles:
          - Arn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${EKSAccessRole}"
            Username: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${EKSAccessRole}"
            Groups: [ 'system:masters' ]
          - Arn: !Ref EKSQSExtensionRoleArn
            Username: EKSK8sExtension
            Groups: [ 'system:masters' ]

  ClusterOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - E3001
            - E1010
    Properties:
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 9e99a48a9960b14926bb7f3b02e22da2b0ab7280
      Url: !GetAtt Cluster.OIDCIssuerURL

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
      - Key: Name
        Value: !Sub '${EnvAlias}-eks-control-sg-${EnvID}'
      VpcId:
        Ref: VPCID
  
  IngressDefaultClusterToNodeSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow managed and unmanaged nodes to communicate with each other
        (all ports)
      FromPort: 0
      GroupId:
        Ref: ClusterSharedNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Fn::GetAtt:
        - Cluster
        - ClusterSecurityGroupId
      ToPort: 65535
  
  IngressInterNodeGroupSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId:
        Ref: ClusterSharedNodeSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: ClusterSharedNodeSecurityGroup
      ToPort: 65535
  
  IngressNodeToDefaultClusterSG:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      FromPort: 0
      GroupId:
        Fn::GetAtt:
        - Cluster
        - ClusterSecurityGroupId
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: ClusterSharedNodeSecurityGroup
      ToPort: 65535
  
  PolicyCloudWatchMetrics:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - cloudwatch:PutMetricData
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName:
        Fn::Sub: "${EnvAlias}-cw-metrics-pol-${EnvID}"
      Roles:
      - Ref: serviceRole
  
  PolicyELBPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - ec2:DescribeAccountAttributes
          - ec2:DescribeAddresses
          - ec2:DescribeInternetGateways
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName:
        Fn::Sub: "${EnvAlias}-elb-pol-${EnvID}"
      Roles:
      - Ref: serviceRole

Outputs:
  EKSEndpoint:
    Value: !GetAtt Cluster.Endpoint
  ClusterSecurityGroupId:
    Value: !Ref ClusterSharedNodeSecurityGroup
  UniqueClusterName:
    Value: !Ref Cluster
  EKSClusterArn:
    Value: !GetAtt Cluster.Arn
  OIDCIssuerURLWithoutProtocol:
    Value: !Join [ '', !Split [ 'https://', !GetAtt Cluster.OIDCIssuerURL ] ]
  CAData:
    Value: !GetAtt Cluster.CertificateAuthorityData
  ControlPlaneSecurityGroupId:
    Value: !Ref ControlPlaneSecurityGroup
