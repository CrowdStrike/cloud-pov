---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Linux Bastion Instance k8s and helm installed.  During boot, bastionSetup.sh will run in userdata to install packages, configure k8s and install the CrowdStrike Operator, Protection Agent and sensors on your EKS cluster.'

Parameters:
  S3Bucket:
    Type: String
    Default: ''
  EnvAlias:
    Type: String
    Default: ''
  EnvID:
    Type: String
    Default: ''
  KeyPairName:
    Type: String
    Default: ''
  VPCID:
    Type: String
    Default: ''
  VPCCIDR:
    Type: String
    Default: ''
  DMZSubnetID:
    Type: String
    Default: ''
  BastionRole:
    Type: String
    Default: ''
  ControlPlaneSecurityGroupId:
    Type: String
    Description: Cluster Control Plane Security Group ID
  EnvironmentVariables:
    Type: String
    Description: A comma-separated list of environment variables for use in
      bootstrapping. Variables must be in the format `key=value`. `Value` cannot
      contain commas.
    Default: ''
  AmazonAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'Get latest Amazon Linux 2 AMI'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  BastionInstanceType:
    Type: String
    Description: Amazon EC2 instance type for the bastion instances.
    Default: t2.small
  RemoteAccessCIDR:
    Default: 1.1.1.1/32
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: Trusted Source IP
    Type: String

Resources:

  BastionEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref BastionHost

  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow connections from specified CIDR ranges
      VpcId: !Ref VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref VPCCIDR

  RemoteToBastion:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow Remote IP to communicate with the Bastion server 
      GroupId: !Ref BastionSG
      CidrIp: !Ref RemoteAccessCIDR
      IpProtocol: tcp
      ToPort: 22
      FromPort: 22

  BastionToAPIServerAccess:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow Bastion server to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroupId
      SourceSecurityGroupId: !Ref BastionSG
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  BastionHostProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionRole

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonAMI
      KeyName: !Ref KeyPairName
      InstanceType: !Ref BastionInstanceType
      IamInstanceProfile: !Ref BastionHostProfile
      SubnetId: !Ref DMZSubnetID
      SecurityGroupIds:
      - !GetAtt BastionSG.GroupId
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 10
          VolumeType: gp2
          Encrypted: true
          DeleteOnTermination: true
      Tags: 
        - Key: 'Name'
          Value: !Sub '${EnvAlias}-Bastion-${EnvID}'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -x
            for e in $(echo "${EnvironmentVariables}" | tr ',' ' '); do
              export $e
              echo "$e" >> /root/.bashrc
            done
            export PATH=$PATH:/usr/local/bin
            #install prereqs
            yum install -y jq wget
            #get and run setup 
            cd /tmp
            aws s3 cp s3://${S3Bucket}/bastionSetup.sh bastionSetup.sh
            chmod +x bastionSetup.sh
            ./bastionSetup.sh

Outputs:
  BastionEIP:
    Value: !Ref BastionEIP
  BastionSecurityGroupID:
    Description: Bastion security group ID.
    Value: !Ref BastionSG
  Postdeployment:
    Description: See the deployment guide for post-deployment steps.
    Value: https://fwd.aws/YqpXk?